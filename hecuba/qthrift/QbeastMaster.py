#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def initQuery(self, selects, keyspace, table, area, precision, maxResults, blockIDs):
    """
    Parameters:
     - selects
     - keyspace
     - table
     - area
     - precision
     - maxResults
     - blockIDs
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def initQuery(self, selects, keyspace, table, area, precision, maxResults, blockIDs):
    """
    Parameters:
     - selects
     - keyspace
     - table
     - area
     - precision
     - maxResults
     - blockIDs
    """
    self.send_initQuery(selects, keyspace, table, area, precision, maxResults, blockIDs)
    return self.recv_initQuery()

  def send_initQuery(self, selects, keyspace, table, area, precision, maxResults, blockIDs):
    self._oprot.writeMessageBegin('initQuery', TMessageType.CALL, self._seqid)
    args = initQuery_args()
    args.selects = selects
    args.keyspace = keyspace
    args.table = table
    args.area = area
    args.precision = precision
    args.maxResults = maxResults
    args.blockIDs = blockIDs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_initQuery(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = initQuery_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "initQuery failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["initQuery"] = Processor.process_initQuery

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_initQuery(self, seqid, iprot, oprot):
    args = initQuery_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = initQuery_result()
    try:
      result.success = self._handler.initQuery(args.selects, args.keyspace, args.table, args.area, args.precision, args.maxResults, args.blockIDs)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("initQuery", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class initQuery_args:
  """
  Attributes:
   - selects
   - keyspace
   - table
   - area
   - precision
   - maxResults
   - blockIDs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'selects', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'keyspace', None, None, ), # 2
    (3, TType.STRING, 'table', None, None, ), # 3
    (4, TType.STRUCT, 'area', (FilteringArea, FilteringArea.thrift_spec), None, ), # 4
    (5, TType.DOUBLE, 'precision', None, None, ), # 5
    (6, TType.I64, 'maxResults', None, None, ), # 6
    (7, TType.LIST, 'blockIDs', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, selects=None, keyspace=None, table=None, area=None, precision=None, maxResults=None, blockIDs=None,):
    self.selects = selects
    self.keyspace = keyspace
    self.table = table
    self.area = area
    self.precision = precision
    self.maxResults = maxResults
    self.blockIDs = blockIDs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.selects = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString()
            self.selects.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.keyspace = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.table = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.area = FilteringArea()
          self.area.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.precision = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.maxResults = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.blockIDs = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = iprot.readString()
            self.blockIDs.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('initQuery_args')
    if self.selects is not None:
      oprot.writeFieldBegin('selects', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.selects))
      for iter51 in self.selects:
        oprot.writeString(iter51)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.keyspace is not None:
      oprot.writeFieldBegin('keyspace', TType.STRING, 2)
      oprot.writeString(self.keyspace)
      oprot.writeFieldEnd()
    if self.table is not None:
      oprot.writeFieldBegin('table', TType.STRING, 3)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRUCT, 4)
      self.area.write(oprot)
      oprot.writeFieldEnd()
    if self.precision is not None:
      oprot.writeFieldBegin('precision', TType.DOUBLE, 5)
      oprot.writeDouble(self.precision)
      oprot.writeFieldEnd()
    if self.maxResults is not None:
      oprot.writeFieldBegin('maxResults', TType.I64, 6)
      oprot.writeI64(self.maxResults)
      oprot.writeFieldEnd()
    if self.blockIDs is not None:
      oprot.writeFieldBegin('blockIDs', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.blockIDs))
      for iter52 in self.blockIDs:
        oprot.writeString(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.selects)
    value = (value * 31) ^ hash(self.keyspace)
    value = (value * 31) ^ hash(self.table)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.precision)
    value = (value * 31) ^ hash(self.maxResults)
    value = (value * 31) ^ hash(self.blockIDs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class initQuery_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('initQuery_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
